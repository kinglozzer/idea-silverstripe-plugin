/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kinglozzer.silverstripe.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Silverstripe.flex</tt>
 */
final class _SilverstripeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SS_INJECTION = 2;
  public static final int SS_LOOKUP = 4;
  public static final int SS_LOOKUP_STEP = 6;
  public static final int SS_LOOKUP_ARGUMENTS = 8;
  public static final int SS_BLOCK_START = 10;
  public static final int SS_BLOCK_STATEMENT = 12;
  public static final int SS_BAD_BLOCK_STATEMENT = 14;
  public static final int SS_IF_STATEMENT = 16;
  public static final int SS_INCLUDE_STATEMENT = 18;
  public static final int SS_TRANSLATION_STATEMENT = 20;
  public static final int SS_CACHED_STATEMENT = 22;
  public static final int SS_REQUIRE_STATEMENT = 24;
  public static final int SS_REQUIRE_CONTENT = 26;
  public static final int SS_INCLUDE_VARS = 28;
  public static final int SS_NAMED_VAR = 30;
  public static final int SS_COMMENT = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\51\1\1\22\0\1\2\1\25\1\31\1\0\1\4\1\7\1\27\1\32\1\61\1\45"+
    "\2\0\1\52\1\44\1\47\1\42\12\3\2\0\1\6\1\24\1\10\2\0\2\5\1\56\6\5\1\60\10\5"+
    "\1\57\7\5\1\0\1\46\2\0\1\23\1\0\1\35\1\36\1\40\1\41\1\21\1\20\1\37\1\17\1"+
    "\15\1\53\1\5\1\11\1\55\1\26\1\12\1\13\1\43\1\33\1\22\1\16\1\34\1\54\1\14\3"+
    "\5\1\50\1\30\1\62\7\0\1\51\242\0\2\51\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\1\2\3\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\5\11\1\12\1\13\1\14\1\5\1\15"+
    "\1\11\4\16\2\11\1\17\1\20\1\21\2\22\1\23"+
    "\2\22\7\23\1\22\1\24\1\5\2\24\1\0\1\25"+
    "\1\11\1\16\2\11\1\26\2\11\1\27\4\11\1\30"+
    "\1\31\3\11\1\32\1\11\4\33\3\0\1\34\1\35"+
    "\1\36\3\16\1\0\1\31\1\0\1\37\1\40\2\23"+
    "\1\41\6\23\4\0\1\42\1\43\2\0\1\25\1\16"+
    "\1\44\2\0\1\45\2\0\1\46\10\0\3\16\1\47"+
    "\1\0\10\23\2\0\1\43\3\24\1\0\1\24\1\42"+
    "\1\25\1\50\1\0\1\51\5\0\1\52\1\53\1\54"+
    "\1\23\1\55\4\23\1\56\1\42\4\0\1\52\1\57"+
    "\2\23\1\60\3\23\1\42\2\0\4\23\1\61\2\0"+
    "\1\62\1\63\1\64\1\23\3\0\1\65\3\0\1\66"+
    "\3\0\1\67\5\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u042f\0\u042f\0\u042f\0\u04fb\0\u0495\0\u052e\0\u0561"+
    "\0\u042f\0\u042f\0\u0594\0\u0495\0\u05c7\0\u04c8\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u042f\0\u042f\0\u042f\0\u042f"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u0a5c\0\u0a8f\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0b8e\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u042f\0\u0cc0"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u042f\0\u0d8c\0\u042f\0\u0462\0\u0495"+
    "\0\u0dbf\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0df2\0\u042f\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u06c6\0\u042f\0\u06f9\0\u0ebe\0\u042f\0\u0ef1"+
    "\0\u0f24\0\u075f\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056"+
    "\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee"+
    "\0\u042f\0\u1221\0\u042f\0\u1254\0\u0b8e\0\u1287\0\u0bf4\0\u12ba"+
    "\0\u0b8e\0\u12ed\0\u1320\0\u1353\0\u0cf3\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u042f\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u042f\0\u171c\0\u174f\0\u1782\0\u17b5\0\u1188\0\u17e8\0\u05fa"+
    "\0\u12ba\0\u181b\0\u042f\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a"+
    "\0\u05fa\0\u042f\0\u075f\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u042f\0\u1782\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u042f"+
    "\0\u042f\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1ab2"+
    "\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u075f\0\u1daf"+
    "\0\u1de2\0\u075f\0\u075f\0\u075f\0\u1e15\0\u1e48\0\u1e7b\0\u1eae"+
    "\0\u075f\0\u1ee1\0\u1f14\0\u1f47\0\u042f\0\u1f7a\0\u1fad\0\u1fe0"+
    "\0\u042f\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u042f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\21\1\22\1\21\1\23\37\21\1\24\1\21\1\25"+
    "\12\21\1\26\1\27\1\30\1\26\1\31\43\26\1\32"+
    "\1\0\10\26\1\33\1\34\1\35\1\36\1\34\1\37"+
    "\2\34\1\40\37\34\1\41\1\34\1\0\7\34\1\42"+
    "\2\34\1\27\1\36\2\34\1\43\3\34\13\43\2\34"+
    "\1\43\4\34\7\43\1\34\1\43\5\34\1\0\1\34"+
    "\6\43\3\34\1\35\1\44\1\45\1\46\1\47\3\34"+
    "\5\47\1\50\1\47\1\51\3\47\2\34\1\52\2\34"+
    "\1\53\1\54\7\47\1\34\1\47\1\34\1\55\1\34"+
    "\1\56\1\34\1\0\1\57\6\47\2\34\1\60\1\61"+
    "\1\44\2\60\1\62\1\63\1\64\1\60\1\65\2\62"+
    "\1\66\1\67\3\62\1\70\2\62\2\60\1\62\4\60"+
    "\1\71\2\62\1\72\1\62\1\73\1\62\1\60\1\62"+
    "\1\74\4\60\1\0\1\60\6\62\2\60\1\34\1\35"+
    "\1\44\1\34\1\46\1\47\1\34\1\40\1\34\13\47"+
    "\2\34\1\47\2\34\1\53\1\54\7\47\1\34\1\47"+
    "\5\34\1\0\1\57\6\47\2\34\1\75\1\76\4\75"+
    "\1\77\1\100\41\75\1\101\11\75\1\34\1\35\1\44"+
    "\1\45\1\46\1\47\1\102\1\40\1\102\13\47\1\102"+
    "\1\103\1\104\1\105\1\106\1\53\1\54\7\47\1\34"+
    "\1\47\5\34\1\0\1\34\6\47\3\34\1\35\1\44"+
    "\2\34\1\107\1\34\1\40\1\34\13\107\2\34\1\107"+
    "\4\34\11\107\2\34\1\107\2\34\1\0\1\34\6\107"+
    "\3\34\1\35\1\44\2\34\1\110\1\34\1\40\1\34"+
    "\4\110\1\111\1\112\5\110\2\34\1\110\2\34\1\53"+
    "\1\54\7\110\1\34\1\110\2\34\1\113\2\34\1\0"+
    "\1\34\6\110\3\34\1\35\1\44\13\34\1\114\21\34"+
    "\1\115\10\34\1\0\1\34\1\116\5\34\1\117\1\34"+
    "\31\120\1\53\1\54\12\120\1\55\15\120\1\34\1\35"+
    "\1\44\2\34\1\121\3\34\13\121\2\34\1\121\4\34"+
    "\7\121\1\34\1\121\5\34\1\0\1\57\6\121\3\34"+
    "\1\35\1\36\1\45\1\46\11\34\1\122\1\34\1\123"+
    "\3\34\1\124\1\34\1\125\2\34\1\53\1\54\16\34"+
    "\1\0\11\34\1\126\1\127\1\130\41\126\1\131\16\126"+
    "\4\21\1\22\1\21\1\132\37\21\1\133\1\21\1\134"+
    "\17\21\1\0\3\21\13\0\2\21\1\0\4\21\7\0"+
    "\1\21\1\0\7\21\6\0\11\21\1\135\54\21\1\0"+
    "\47\21\1\0\15\21\1\22\56\21\64\0\1\27\63\0"+
    "\1\44\65\0\1\47\3\0\13\47\2\0\1\47\4\0"+
    "\7\47\1\0\1\47\7\0\6\47\3\0\1\35\66\0"+
    "\1\136\3\0\13\136\2\0\1\136\4\0\7\136\1\0"+
    "\1\136\7\0\6\136\12\0\1\137\55\0\1\43\1\0"+
    "\1\43\3\0\13\43\2\0\1\43\4\0\7\43\1\0"+
    "\1\43\7\0\6\43\5\0\1\45\62\0\1\47\1\0"+
    "\1\47\3\0\13\47\2\0\1\47\4\0\7\47\1\0"+
    "\1\47\7\0\6\47\5\0\1\47\1\0\1\47\3\0"+
    "\13\47\2\0\1\47\4\0\1\140\6\47\1\0\1\47"+
    "\7\0\6\47\5\0\1\47\1\0\1\47\3\0\13\47"+
    "\2\0\1\47\4\0\2\47\1\141\4\47\1\0\1\47"+
    "\7\0\6\47\5\0\1\47\1\0\1\47\3\0\13\47"+
    "\2\0\1\47\4\0\1\47\1\142\5\47\1\0\1\47"+
    "\7\0\6\47\2\0\31\143\1\144\31\143\32\145\1\144"+
    "\30\145\1\0\1\61\64\0\1\62\1\0\1\62\3\0"+
    "\13\62\2\0\1\62\4\0\7\62\1\0\1\62\7\0"+
    "\6\62\11\0\1\146\63\0\1\147\55\0\1\62\1\0"+
    "\1\62\3\0\1\62\1\150\11\62\2\0\1\62\4\0"+
    "\7\62\1\0\1\62\7\0\6\62\5\0\1\62\1\0"+
    "\1\62\3\0\4\62\1\151\6\62\2\0\1\62\4\0"+
    "\7\62\1\0\1\62\7\0\6\62\5\0\1\62\1\0"+
    "\1\62\3\0\7\62\1\152\3\62\2\0\1\153\4\0"+
    "\7\62\1\0\1\62\7\0\6\62\5\0\1\62\1\0"+
    "\1\62\3\0\1\154\12\62\2\0\1\155\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\10\62\1\156\2\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\13\62\2\0\1\62\4\0\2\62\1\157\4\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\13\62\2\0\1\62\4\0\2\62\1\160\4\62"+
    "\1\0\1\62\7\0\6\62\46\0\1\161\16\0\1\75"+
    "\1\162\4\75\1\77\1\100\41\75\1\101\11\75\1\162"+
    "\1\76\4\162\1\163\1\164\53\162\1\75\1\162\4\75"+
    "\1\77\1\165\41\75\1\101\12\75\1\162\4\75\1\77"+
    "\1\100\1\166\40\75\1\101\11\75\1\101\1\162\4\101"+
    "\1\167\1\170\53\101\24\0\1\171\41\0\1\47\1\0"+
    "\1\47\3\0\1\47\1\172\11\47\2\0\1\47\4\0"+
    "\7\47\1\0\1\47\7\0\6\47\31\0\1\173\63\0"+
    "\1\173\35\0\1\107\1\0\1\107\3\0\13\107\2\0"+
    "\1\107\4\0\11\107\2\0\1\107\4\0\6\107\4\0"+
    "\1\174\1\175\1\0\1\175\3\0\13\175\1\176\1\0"+
    "\1\175\4\0\7\175\1\0\1\175\2\0\1\177\1\200"+
    "\3\0\6\175\4\0\1\174\1\175\1\0\1\175\3\0"+
    "\11\175\1\201\1\175\1\176\1\0\1\175\4\0\7\175"+
    "\1\0\1\175\2\0\1\177\1\200\3\0\6\175\5\0"+
    "\1\177\1\0\1\177\3\0\13\177\2\0\1\177\4\0"+
    "\7\177\1\0\1\177\2\0\1\177\1\200\3\0\6\177"+
    "\21\0\1\202\65\0\1\203\75\0\1\204\25\0\31\120"+
    "\2\0\12\120\1\0\15\120\2\0\1\174\1\205\1\0"+
    "\1\205\3\0\13\205\1\176\1\0\1\205\4\0\7\205"+
    "\1\0\1\205\7\0\6\205\35\0\1\206\64\0\1\207"+
    "\61\0\1\210\72\0\1\211\21\0\1\136\1\0\1\136"+
    "\3\0\13\136\2\0\1\136\4\0\7\136\1\0\1\136"+
    "\7\0\6\136\5\0\1\47\1\0\1\47\3\0\13\47"+
    "\2\0\1\47\4\0\1\47\1\212\5\47\1\0\1\47"+
    "\7\0\6\47\5\0\1\47\1\0\1\47\3\0\1\213"+
    "\12\47\2\0\1\47\4\0\7\47\1\0\1\47\7\0"+
    "\6\47\5\0\1\47\1\0\1\47\3\0\1\214\12\47"+
    "\2\0\1\47\4\0\7\47\1\0\1\47\7\0\6\47"+
    "\20\0\1\215\25\0\1\216\21\0\1\62\1\0\1\62"+
    "\3\0\1\62\1\217\11\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\5\62\1\220\5\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\13\62\2\0\1\62\4\0\5\62\1\221\1\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\11\62\1\222\1\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\13\62\2\0\1\62\4\0\6\62\1\223\1\0"+
    "\1\62\7\0\6\62\5\0\1\62\1\0\1\62\3\0"+
    "\13\62\2\0\1\62\4\0\7\62\1\0\1\224\7\0"+
    "\6\62\5\0\1\62\1\0\1\62\3\0\11\62\1\225"+
    "\1\62\2\0\1\62\4\0\7\62\1\0\1\62\7\0"+
    "\6\62\5\0\1\62\1\0\1\62\3\0\13\62\2\0"+
    "\1\62\4\0\5\62\1\226\1\62\1\0\1\62\7\0"+
    "\6\62\11\0\1\227\53\0\6\162\1\163\1\164\61\162"+
    "\1\163\1\230\61\162\1\163\1\164\1\231\52\162\1\232"+
    "\1\0\4\232\1\233\1\234\1\166\40\232\1\235\11\232"+
    "\1\236\1\0\47\236\1\0\11\236\1\101\1\162\4\101"+
    "\1\167\1\237\54\101\1\162\4\101\1\167\1\170\1\231"+
    "\52\101\3\0\1\47\1\0\1\47\3\0\5\47\1\240"+
    "\5\47\2\0\1\47\4\0\7\47\1\0\1\47\7\0"+
    "\6\47\4\0\1\174\21\0\1\176\40\0\1\176\63\0"+
    "\1\241\1\0\1\241\3\0\13\241\2\0\1\241\4\0"+
    "\7\241\1\0\1\241\2\0\1\241\4\0\6\241\23\0"+
    "\1\242\63\0\1\243\114\0\1\244\42\0\1\245\37\0"+
    "\1\246\62\0\1\247\60\0\1\250\56\0\1\47\1\0"+
    "\1\47\3\0\10\47\1\251\2\47\2\0\1\47\4\0"+
    "\7\47\1\0\1\47\7\0\6\47\5\0\1\47\1\0"+
    "\1\47\3\0\11\47\1\212\1\47\2\0\1\47\4\0"+
    "\7\47\1\0\1\47\7\0\6\47\5\0\1\47\1\0"+
    "\1\47\3\0\1\251\12\47\2\0\1\47\4\0\7\47"+
    "\1\0\1\47\7\0\6\47\46\0\1\252\21\0\1\62"+
    "\1\0\1\62\3\0\2\62\1\253\10\62\2\0\1\62"+
    "\4\0\7\62\1\0\1\62\7\0\6\62\5\0\1\62"+
    "\1\0\1\62\3\0\6\62\1\253\4\62\2\0\1\62"+
    "\4\0\7\62\1\0\1\62\7\0\6\62\5\0\1\62"+
    "\1\0\1\62\3\0\1\254\12\62\2\0\1\62\4\0"+
    "\7\62\1\0\1\62\7\0\6\62\5\0\1\62\1\0"+
    "\1\62\3\0\10\62\1\255\2\62\2\0\1\62\4\0"+
    "\7\62\1\0\1\62\7\0\6\62\5\0\1\62\1\0"+
    "\1\62\3\0\12\62\1\256\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\13\62\2\0\1\62\4\0\1\62\1\257\5\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\10\62\1\260\2\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\6\62\1\261\4\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\12\0\1\262\62\0\1\231"+
    "\52\0\1\232\1\0\4\232\1\233\1\234\41\232\1\235"+
    "\12\232\1\0\4\232\1\233\1\263\41\232\1\235\12\232"+
    "\1\0\4\232\1\233\1\234\1\236\40\232\1\235\11\232"+
    "\1\235\1\0\4\235\1\264\1\265\54\235\1\0\4\235"+
    "\1\264\1\265\1\231\52\235\55\0\1\266\42\0\1\267"+
    "\46\0\1\270\63\0\1\245\51\0\1\270\61\0\1\271"+
    "\55\0\1\62\1\0\1\62\3\0\13\62\2\0\1\62"+
    "\4\0\1\62\1\272\5\62\1\0\1\62\7\0\6\62"+
    "\5\0\1\62\1\0\1\62\3\0\12\62\1\273\2\0"+
    "\1\62\4\0\7\62\1\0\1\62\7\0\6\62\5\0"+
    "\1\62\1\0\1\274\3\0\13\274\2\0\1\274\4\0"+
    "\7\274\1\0\1\274\7\0\6\274\5\0\1\62\1\0"+
    "\1\62\3\0\4\62\1\275\6\62\2\0\1\62\4\0"+
    "\7\62\1\0\1\62\7\0\6\62\5\0\1\62\1\0"+
    "\1\62\3\0\12\62\1\276\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\10\62\1\277\2\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\2\0\1\235\1\0\4\235"+
    "\1\264\1\300\54\235\1\0\4\235\1\264\1\265\1\0"+
    "\52\235\21\0\1\301\63\0\1\302\43\0\1\62\1\0"+
    "\1\62\3\0\13\62\2\0\1\62\4\0\6\62\1\303"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\4\62\1\304\6\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\274\1\0\1\274"+
    "\3\0\13\274\2\0\1\274\4\0\7\274\1\0\1\274"+
    "\7\0\6\274\5\0\1\62\1\0\1\62\3\0\13\62"+
    "\2\0\1\62\4\0\1\305\6\62\1\0\1\62\7\0"+
    "\6\62\5\0\1\62\1\0\1\62\3\0\5\62\1\306"+
    "\5\62\2\0\1\62\4\0\7\62\1\0\1\62\7\0"+
    "\6\62\5\0\1\62\1\0\1\62\3\0\13\62\2\0"+
    "\1\62\4\0\6\62\1\307\1\0\1\62\7\0\6\62"+
    "\43\0\1\310\61\0\1\311\25\0\1\62\1\0\1\62"+
    "\3\0\10\62\1\312\2\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\7\62\1\313\3\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\10\62\1\314\2\62\2\0\1\62\4\0\7\62"+
    "\1\0\1\62\7\0\6\62\5\0\1\62\1\0\1\62"+
    "\3\0\13\62\2\0\1\62\4\0\2\62\1\315\4\62"+
    "\1\0\1\62\7\0\6\62\60\0\1\316\1\0\1\317"+
    "\35\0\1\320\32\0\1\62\1\0\1\62\3\0\13\62"+
    "\2\0\1\62\4\0\4\62\1\321\2\62\1\0\1\62"+
    "\7\0\6\62\61\0\1\322\40\0\1\323\42\0\1\324"+
    "\124\0\1\325\57\0\1\326\21\0\1\327\104\0\1\330"+
    "\43\0\1\331\66\0\1\332\100\0\1\333\55\0\1\334"+
    "\44\0\1\335\60\0\1\336\65\0\1\337\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8466];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\5\1\1\11\3\1\3\11\4\1\2\11\12\1"+
    "\4\11\20\1\1\0\15\1\1\11\4\1\1\11\1\1"+
    "\1\11\3\1\3\0\1\11\1\1\1\11\3\1\1\0"+
    "\1\11\1\0\1\1\1\11\11\1\4\0\2\1\2\0"+
    "\1\11\1\1\1\11\2\0\1\1\2\0\1\1\10\0"+
    "\3\1\1\11\1\0\10\1\2\0\1\11\3\1\1\0"+
    "\4\1\1\0\1\11\5\0\1\1\1\11\7\1\1\11"+
    "\1\1\4\0\2\11\7\1\2\0\5\1\2\0\4\1"+
    "\3\0\1\1\3\0\1\11\3\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _SilverstripeLexer() {
        this((java.io.Reader)null);
    }

    private void resetAll() {
    }
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopstate() {
        yybegin(stack.pop());
    }

    public void yycleanstates() {
        while(!stack.isEmpty()) {
            yybegin(stack.pop());
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SilverstripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 57: break;
          case 2: 
            { // Backtrack over the {$ characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("$")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")
    )) {
        yypushback(1);
    }

    yypushstate(SS_INJECTION);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 58: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 4: 
            { yypushback(yylength()); yycleanstates(); return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 6: 
            { return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 62: break;
          case 7: 
            { return SilverstripeTokenTypes.SS_LEFT_BRACE;
            } 
            // fall through
          case 63: break;
          case 8: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_RIGHT_BRACE;
            } 
            // fall through
          case 64: break;
          case 9: 
            { yypushback(yylength()); yypopstate();
            } 
            // fall through
          case 65: break;
          case 10: 
            { yypushstate(SS_LOOKUP_STEP); return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 66: break;
          case 11: 
            { yypushstate(SS_LOOKUP_ARGUMENTS); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 67: break;
          case 12: 
            { yypopstate(); return SilverstripeTokenTypes.SS_IDENTIFIER;
            } 
            // fall through
          case 68: break;
          case 13: 
            { return SilverstripeTokenTypes.SS_NUMBER;
            } 
            // fall through
          case 69: break;
          case 14: 
            { yypushstate(SS_LOOKUP); return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 70: break;
          case 15: 
            { yypopstate(); return SilverstripeTokenTypes.SS_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 71: break;
          case 16: 
            { return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 72: break;
          case 17: 
            { return SilverstripeTokenTypes.SS_COMMA;
            } 
            // fall through
          case 73: break;
          case 18: 
            { yypushback(yylength()); yypushstate(SS_BAD_BLOCK_STATEMENT);
            } 
            // fall through
          case 74: break;
          case 19: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_BLOCK_NAME;
            } 
            // fall through
          case 75: break;
          case 20: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 76: break;
          case 21: 
            { return SilverstripeTokenTypes.SS_COMPARISON_OPERATOR;
            } 
            // fall through
          case 77: break;
          case 22: 
            { yypushstate(SS_INCLUDE_VARS); return SilverstripeTokenTypes.SS_INCLUDE_FILE;
            } 
            // fall through
          case 78: break;
          case 23: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 24: 
            { yypushstate(SS_REQUIRE_CONTENT); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 80: break;
          case 25: 
            { return SilverstripeTokenTypes.SS_STRING;
            } 
            // fall through
          case 81: break;
          case 26: 
            { return SilverstripeTokenTypes.SS_EQUALS;
            } 
            // fall through
          case 82: break;
          case 27: 
            { return SilverstripeTokenTypes.SS_COMMENT;
            } 
            // fall through
          case 83: break;
          case 28: 
            { // Backtrack over the <% characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
    )) {
        yypushback(1);
    }

    yypushstate(SS_BLOCK_START);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 84: break;
          case 29: 
            { return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 85: break;
          case 30: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 86: break;
          case 31: 
            { return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 87: break;
          case 32: 
            { yypopstate(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 88: break;
          case 33: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_IF_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 34: 
            { // Backtrack until we've passed back over the <% characters of the new block
        while (yylength() > 0 && (
            yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
            || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
        )) {
            yypushback(1);
        }

        yycleanstates(); // Reset state to resume lexing
        return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 90: break;
          case 35: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BAD_BLOCK_STATEMENT;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return SilverstripeTokenTypes.SS_AND_OR_OPERATOR;
            } 
            // fall through
          case 92: break;
          case 37: 
            { yypushback(1); yypushstate(SS_NAMED_VAR); return SilverstripeTokenTypes.SS_NAMED_ARGUMENT_NAME;
            } 
            // fall through
          case 93: break;
          case 38: 
            { return SilverstripeTokenTypes.SS_IS_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 39: 
            { yypushstate(SS_TRANSLATION_STATEMENT); yypushback(1); return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 95: break;
          case 40: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_IDENTIFIER;
            } 
            // fall through
          case 96: break;
          case 41: 
            { return SilverstripeTokenTypes.SS_REQUIRE_CSS;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return SilverstripeTokenTypes.SS_PRIMITIVE;
            } 
            // fall through
          case 98: break;
          case 43: 
            { yypushstate(SS_COMMENT); return SilverstripeTokenTypes.SS_COMMENT_START;
            } 
            // fall through
          case 99: break;
          case 44: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_START_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 45: 
            { return SilverstripeTokenTypes.SS_ELSE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 46: 
            { yypopstate(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 102: break;
          case 47: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 103: break;
          case 48: 
            { return SilverstripeTokenTypes.SS_END_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 49: 
            { yypushstate(SS_CACHED_STATEMENT); return SilverstripeTokenTypes.SS_CACHED_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 50: 
            { yypushstate(SS_INCLUDE_STATEMENT); return SilverstripeTokenTypes.SS_INCLUDE_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 51: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_ELSE_IF_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 52: 
            { yypushstate(SS_REQUIRE_STATEMENT); return SilverstripeTokenTypes.SS_REQUIRE_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 53: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_SIMPLE_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return SilverstripeTokenTypes.SS_REQUIRE_THEMED_CSS;
            } 
            // fall through
          case 110: break;
          case 55: 
            { return SilverstripeTokenTypes.SS_REQUIRE_JS;
            } 
            // fall through
          case 111: break;
          case 56: 
            { return SilverstripeTokenTypes.SS_REQUIRE_THEMED_JS;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
