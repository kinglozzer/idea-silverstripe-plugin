/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kinglozzer.silverstripe.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Silverstripe.flex</tt>
 */
final class _SilverstripeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SS_INJECTION = 2;
  public static final int SS_LOOKUP = 4;
  public static final int SS_LOOKUP_STEP = 6;
  public static final int SS_LOOKUP_ARGUMENTS = 8;
  public static final int SS_BLOCK_START = 10;
  public static final int SS_BLOCK_STATEMENT = 12;
  public static final int SS_BAD_BLOCK_STATEMENT = 14;
  public static final int SS_IF_STATEMENT = 16;
  public static final int SS_INCLUDE_STATEMENT = 18;
  public static final int SS_TRANSLATION_STATEMENT = 20;
  public static final int SS_CACHED_STATEMENT = 22;
  public static final int SS_REQUIRE_STATEMENT = 24;
  public static final int SS_REQUIRE_CONTENT = 26;
  public static final int SS_INCLUDE_VARS = 28;
  public static final int SS_NAMED_VAR = 30;
  public static final int SS_COMMENT = 32;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\60\1\1\22\0\1\2\1\35\1\41\1\0\1\14\1\17\1\37\1\42\1\70\1\55"+
    "\1\0\1\3\1\61\1\54\1\5\1\52\1\7\1\13\10\4\2\0\1\16\1\34\1\20\2\0\1\11\1\12"+
    "\1\65\1\11\1\6\1\11\3\15\1\67\10\15\1\66\4\15\1\10\2\15\1\0\1\56\2\0\1\33"+
    "\1\0\1\45\1\46\1\50\1\51\1\31\1\30\1\47\1\27\1\25\1\62\1\15\1\21\1\64\1\36"+
    "\1\22\1\23\1\53\1\43\1\32\1\26\1\44\1\63\1\24\1\10\2\15\1\57\1\40\1\71\7\0"+
    "\1\60\242\0\2\60\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\1\1\1\2\3\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\3\11\1\12\2\11\1\13\1\14\1\5"+
    "\1\11\1\15\1\16\1\17\1\15\1\11\3\17\2\11"+
    "\1\20\1\21\2\22\1\23\2\22\7\23\1\22\1\24"+
    "\1\5\2\24\1\0\1\11\1\25\1\11\1\17\2\11"+
    "\1\26\2\11\1\27\4\11\1\30\1\31\3\11\1\32"+
    "\1\11\4\33\3\0\1\34\1\35\1\36\2\0\1\15"+
    "\2\0\3\17\1\0\1\31\1\0\1\37\1\40\2\23"+
    "\1\41\6\23\4\0\1\42\1\43\2\0\1\25\1\17"+
    "\1\44\3\0\1\45\1\0\1\46\11\0\3\15\3\17"+
    "\1\47\1\0\10\23\2\0\1\43\3\24\1\0\1\24"+
    "\1\42\1\25\1\50\1\0\1\51\5\0\1\52\1\53"+
    "\1\54\1\23\1\55\4\23\1\56\1\42\4\0\1\52"+
    "\1\57\2\23\1\60\3\23\1\42\2\0\4\23\1\61"+
    "\2\0\1\62\1\63\1\64\1\23\3\0\1\65\3\0"+
    "\1\66\3\0\1\67\5\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u04c2\0\u04c2\0\u04c2\0\u05aa\0\u0536\0\u04c2\0\u05e4"+
    "\0\u061e\0\u04c2\0\u0658\0\u0536\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\u0570\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u04c2"+
    "\0\u04c2\0\u04c2\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8"+
    "\0\u0c02\0\u0c3c\0\u0c76\0\u0706\0\u0cb0\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0dd2\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u04c2\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u04c2\0\u1016"+
    "\0\u04c2\0\u04fc\0\u0536\0\u1050\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u108a\0\u04c2\0\u0706\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u11e6\0\u1220\0\u0862\0\u04c2\0\u089c\0\u125a\0\u04c2\0\u1294"+
    "\0\u12ce\0\u0910\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u04c2\0\u1634\0\u04c2\0\u166e\0\u0dd2\0\u16a8\0\u16e2\0\u0e46"+
    "\0\u0dd2\0\u171c\0\u1756\0\u1790\0\u0f68\0\u17ca\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18b2\0\u1138\0\u1172\0\u18ec\0\u1926\0\u1960"+
    "\0\u04c2\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u04c2\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1586\0\u1d00\0\u0740\0\u1d3a\0\u1d74\0\u04c2\0\u1dae"+
    "\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u0740\0\u04c2\0\u0910\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u04c2\0\u1c8c\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u04c2\0\u04c2\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2066\0\u2270\0\u22aa\0\u22e4\0\u231e"+
    "\0\u2358\0\u2392\0\u0910\0\u23cc\0\u2406\0\u0910\0\u0910\0\u0910"+
    "\0\u2440\0\u247a\0\u24b4\0\u24ee\0\u0910\0\u2528\0\u2562\0\u259c"+
    "\0\u04c2\0\u25d6\0\u2610\0\u264a\0\u04c2\0\u2684\0\u26be\0\u26f8"+
    "\0\u2732\0\u276c\0\u04c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\21\1\22\1\21\1\23\37\21\1\24\1\25\12\21"+
    "\1\26\1\27\1\30\11\26\1\31\42\26\1\32\1\0"+
    "\10\26\1\33\1\34\1\35\1\36\2\34\1\37\6\34"+
    "\1\40\2\34\1\41\40\34\1\0\7\34\1\42\2\34"+
    "\1\27\1\36\3\34\1\43\1\34\3\43\2\34\1\43"+
    "\3\34\13\43\2\34\1\43\4\34\7\43\1\34\1\43"+
    "\4\34\1\0\1\34\6\43\3\34\1\35\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\3\50\1\46\1\52\1\50"+
    "\3\34\5\50\1\53\1\50\1\54\3\50\2\34\1\55"+
    "\2\34\1\56\1\57\7\50\1\34\1\50\1\45\1\60"+
    "\2\34\1\0\1\61\6\50\2\34\1\62\1\63\1\44"+
    "\3\62\1\64\1\62\3\64\2\62\1\64\1\65\1\66"+
    "\1\62\1\67\2\64\1\70\1\71\3\64\1\72\2\64"+
    "\2\62\1\64\4\62\1\73\2\64\1\74\1\64\1\75"+
    "\1\64\1\62\1\64\1\76\3\62\1\0\1\62\6\64"+
    "\2\62\1\34\1\35\1\44\3\34\1\50\1\34\3\50"+
    "\1\34\1\52\1\50\1\34\1\41\1\34\13\50\2\34"+
    "\1\50\2\34\1\56\1\57\7\50\1\34\1\50\4\34"+
    "\1\0\1\61\6\50\2\34\1\77\1\100\14\77\1\101"+
    "\1\102\40\77\1\103\11\77\1\34\1\35\1\44\1\45"+
    "\1\46\1\104\1\50\1\51\3\50\1\46\1\52\1\50"+
    "\1\105\1\41\1\105\13\50\1\105\1\106\1\107\1\110"+
    "\1\111\1\56\1\57\7\50\1\34\1\50\1\45\3\34"+
    "\1\0\1\34\6\50\3\34\1\35\1\44\3\34\1\112"+
    "\1\34\3\112\2\34\1\112\1\34\1\41\1\34\13\112"+
    "\2\34\1\112\4\34\11\112\2\34\1\112\1\34\1\0"+
    "\1\34\6\112\3\34\1\35\1\44\3\34\1\113\1\34"+
    "\3\113\2\34\1\113\1\34\1\41\1\34\4\113\1\114"+
    "\1\115\5\113\2\34\1\113\2\34\1\56\1\57\7\113"+
    "\1\34\1\113\2\34\1\116\1\34\1\0\1\34\6\113"+
    "\3\34\1\35\1\44\23\34\1\117\21\34\1\120\7\34"+
    "\1\0\1\34\1\121\5\34\1\122\1\34\41\123\1\56"+
    "\1\57\12\123\1\60\14\123\1\34\1\35\1\44\3\34"+
    "\1\124\1\34\3\124\2\34\1\124\3\34\13\124\2\34"+
    "\1\124\4\34\7\124\1\34\1\124\4\34\1\0\1\61"+
    "\6\124\3\34\1\35\1\36\1\45\1\46\1\104\1\34"+
    "\1\51\3\34\1\46\1\52\11\34\1\125\1\34\1\126"+
    "\3\34\1\127\1\34\1\130\2\34\1\56\1\57\11\34"+
    "\1\45\3\34\1\0\11\34\1\131\1\132\1\133\51\131"+
    "\1\134\15\131\14\21\1\22\1\21\1\135\37\21\1\136"+
    "\1\137\20\21\1\0\1\21\3\0\2\21\1\0\3\21"+
    "\13\0\2\21\1\0\4\21\7\0\1\21\1\0\6\21"+
    "\6\0\21\21\1\140\53\21\1\0\56\21\1\0\25\21"+
    "\1\22\55\21\73\0\1\27\72\0\1\44\75\0\1\50"+
    "\1\0\3\50\2\0\1\50\3\0\13\50\2\0\1\50"+
    "\4\0\7\50\1\0\1\50\6\0\6\50\3\0\1\35"+
    "\76\0\1\141\1\0\3\141\2\0\1\141\3\0\13\141"+
    "\2\0\1\141\4\0\7\141\1\0\1\141\6\0\6\141"+
    "\22\0\1\142\55\0\1\43\1\0\6\43\1\0\1\43"+
    "\3\0\13\43\2\0\1\43\4\0\7\43\1\0\1\43"+
    "\6\0\6\43\6\0\1\46\1\143\1\0\1\51\3\0"+
    "\1\46\62\0\1\46\1\143\1\144\1\46\3\0\1\46"+
    "\15\0\1\144\44\0\1\145\2\0\1\145\3\0\1\145"+
    "\62\0\1\50\1\0\6\50\1\0\1\50\3\0\13\50"+
    "\2\0\1\50\4\0\7\50\1\0\1\50\6\0\6\50"+
    "\6\0\1\46\1\143\1\144\1\46\1\146\1\0\1\147"+
    "\1\46\15\0\1\144\14\0\1\147\27\0\1\50\1\0"+
    "\6\50\1\0\1\50\3\0\13\50\2\0\1\50\4\0"+
    "\1\150\6\50\1\0\1\50\6\0\6\50\6\0\1\50"+
    "\1\0\6\50\1\0\1\50\3\0\13\50\2\0\1\50"+
    "\4\0\2\50\1\151\4\50\1\0\1\50\6\0\6\50"+
    "\6\0\1\50\1\0\6\50\1\0\1\50\3\0\13\50"+
    "\2\0\1\50\4\0\1\50\1\152\5\50\1\0\1\50"+
    "\6\0\6\50\2\0\41\153\1\154\30\153\42\155\1\154"+
    "\27\155\1\0\1\63\74\0\1\64\1\0\6\64\1\0"+
    "\1\64\3\0\13\64\2\0\1\64\4\0\7\64\1\0"+
    "\1\64\6\0\6\64\21\0\1\156\72\0\1\157\55\0"+
    "\1\64\1\0\6\64\1\0\1\64\3\0\1\64\1\160"+
    "\11\64\2\0\1\64\4\0\7\64\1\0\1\64\6\0"+
    "\6\64\6\0\1\64\1\0\6\64\1\0\1\64\3\0"+
    "\4\64\1\161\6\64\2\0\1\64\4\0\7\64\1\0"+
    "\1\64\6\0\6\64\6\0\1\64\1\0\6\64\1\0"+
    "\1\64\3\0\7\64\1\162\3\64\2\0\1\163\4\0"+
    "\7\64\1\0\1\64\6\0\6\64\6\0\1\64\1\0"+
    "\6\64\1\0\1\64\3\0\1\164\12\64\2\0\1\165"+
    "\4\0\7\64\1\0\1\64\6\0\6\64\6\0\1\64"+
    "\1\0\6\64\1\0\1\64\3\0\10\64\1\166\2\64"+
    "\2\0\1\64\4\0\7\64\1\0\1\64\6\0\6\64"+
    "\6\0\1\64\1\0\6\64\1\0\1\64\3\0\13\64"+
    "\2\0\1\64\4\0\2\64\1\167\4\64\1\0\1\64"+
    "\6\0\6\64\6\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\13\64\2\0\1\64\4\0\2\64\1\170\4\64"+
    "\1\0\1\64\6\0\6\64\56\0\1\171\15\0\1\77"+
    "\1\172\14\77\1\101\1\102\40\77\1\103\11\77\1\172"+
    "\1\100\14\172\1\173\1\174\52\172\1\77\1\172\14\77"+
    "\1\101\1\175\40\77\1\103\12\77\1\172\14\77\1\101"+
    "\1\102\1\176\37\77\1\103\11\77\1\103\1\172\14\103"+
    "\1\177\1\200\52\103\34\0\1\201\41\0\1\50\1\0"+
    "\6\50\1\0\1\50\3\0\1\50\1\202\11\50\2\0"+
    "\1\50\4\0\7\50\1\0\1\50\6\0\6\50\41\0"+
    "\1\203\72\0\1\203\35\0\1\112\1\0\6\112\1\0"+
    "\1\112\3\0\13\112\2\0\1\112\4\0\11\112\2\0"+
    "\1\112\3\0\6\112\4\0\1\204\1\0\1\205\1\206"+
    "\6\205\1\0\1\205\3\0\13\205\1\207\1\0\1\205"+
    "\4\0\7\205\1\0\1\205\2\0\1\210\3\0\6\205"+
    "\4\0\1\204\1\0\1\205\1\206\6\205\1\0\1\205"+
    "\3\0\11\205\1\211\1\205\1\207\1\0\1\205\4\0"+
    "\7\205\1\0\1\205\2\0\1\210\3\0\6\205\6\0"+
    "\1\210\1\206\6\210\1\0\1\210\3\0\13\210\2\0"+
    "\1\210\4\0\7\210\1\0\1\210\2\0\1\210\3\0"+
    "\6\210\31\0\1\212\74\0\1\213\104\0\1\214\24\0"+
    "\41\123\2\0\12\123\1\0\14\123\2\0\1\204\1\0"+
    "\1\215\1\0\6\215\1\0\1\215\3\0\13\215\1\207"+
    "\1\0\1\215\4\0\7\215\1\0\1\215\6\0\6\215"+
    "\45\0\1\216\73\0\1\217\70\0\1\220\101\0\1\221"+
    "\21\0\1\141\1\0\6\141\1\0\1\141\3\0\13\141"+
    "\2\0\1\141\4\0\7\141\1\0\1\141\6\0\6\141"+
    "\5\0\1\222\1\223\2\0\1\223\3\0\1\223\40\0"+
    "\1\222\21\0\1\145\1\0\1\144\1\145\3\0\1\145"+
    "\15\0\1\144\44\0\1\224\1\0\2\224\1\0\3\224"+
    "\14\0\2\224\13\0\2\224\1\0\2\224\13\0\1\224"+
    "\13\0\1\225\3\0\1\225\62\0\1\50\1\0\6\50"+
    "\1\0\1\50\3\0\13\50\2\0\1\50\4\0\1\50"+
    "\1\226\5\50\1\0\1\50\6\0\6\50\6\0\1\50"+
    "\1\0\6\50\1\0\1\50\3\0\1\227\12\50\2\0"+
    "\1\50\4\0\7\50\1\0\1\50\6\0\6\50\6\0"+
    "\1\50\1\0\6\50\1\0\1\50\3\0\1\230\12\50"+
    "\2\0\1\50\4\0\7\50\1\0\1\50\6\0\6\50"+
    "\30\0\1\231\25\0\1\232\21\0\1\64\1\0\6\64"+
    "\1\0\1\64\3\0\1\64\1\233\11\64\2\0\1\64"+
    "\4\0\7\64\1\0\1\64\6\0\6\64\6\0\1\64"+
    "\1\0\6\64\1\0\1\64\3\0\5\64\1\234\5\64"+
    "\2\0\1\64\4\0\7\64\1\0\1\64\6\0\6\64"+
    "\6\0\1\64\1\0\6\64\1\0\1\64\3\0\13\64"+
    "\2\0\1\64\4\0\5\64\1\235\1\64\1\0\1\64"+
    "\6\0\6\64\6\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\11\64\1\236\1\64\2\0\1\64\4\0\7\64"+
    "\1\0\1\64\6\0\6\64\6\0\1\64\1\0\6\64"+
    "\1\0\1\64\3\0\13\64\2\0\1\64\4\0\6\64"+
    "\1\237\1\0\1\64\6\0\6\64\6\0\1\64\1\0"+
    "\6\64\1\0\1\64\3\0\13\64\2\0\1\64\4\0"+
    "\7\64\1\0\1\240\6\0\6\64\6\0\1\64\1\0"+
    "\6\64\1\0\1\64\3\0\11\64\1\241\1\64\2\0"+
    "\1\64\4\0\7\64\1\0\1\64\6\0\6\64\6\0"+
    "\1\64\1\0\6\64\1\0\1\64\3\0\13\64\2\0"+
    "\1\64\4\0\5\64\1\242\1\64\1\0\1\64\6\0"+
    "\6\64\21\0\1\243\52\0\16\172\1\173\1\174\70\172"+
    "\1\173\1\244\70\172\1\173\1\174\1\245\51\172\1\246"+
    "\1\0\14\246\1\247\1\250\1\176\37\246\1\251\11\246"+
    "\1\252\1\0\56\252\1\0\11\252\1\103\1\172\14\103"+
    "\1\177\1\253\53\103\1\172\14\103\1\177\1\200\1\245"+
    "\51\103\4\0\1\50\1\0\6\50\1\0\1\50\3\0"+
    "\5\50\1\254\5\50\2\0\1\50\4\0\7\50\1\0"+
    "\1\50\6\0\6\50\4\0\1\204\31\0\1\207\41\0"+
    "\1\255\1\0\6\255\1\0\1\255\3\0\13\255\2\0"+
    "\1\255\4\0\7\255\1\0\1\255\2\0\1\255\3\0"+
    "\6\255\4\0\1\207\120\0\1\256\72\0\1\257\122\0"+
    "\1\260\52\0\1\261\46\0\1\262\71\0\1\263\67\0"+
    "\1\264\56\0\1\223\2\0\1\223\3\0\1\223\62\0"+
    "\1\50\1\0\6\50\1\0\1\50\3\0\10\50\1\265"+
    "\2\50\2\0\1\50\4\0\7\50\1\0\1\50\6\0"+
    "\6\50\6\0\1\50\1\0\6\50\1\0\1\50\3\0"+
    "\11\50\1\226\1\50\2\0\1\50\4\0\7\50\1\0"+
    "\1\50\6\0\6\50\6\0\1\50\1\0\6\50\1\0"+
    "\1\50\3\0\1\265\12\50\2\0\1\50\4\0\7\50"+
    "\1\0\1\50\6\0\6\50\56\0\1\266\21\0\1\64"+
    "\1\0\6\64\1\0\1\64\3\0\2\64\1\267\10\64"+
    "\2\0\1\64\4\0\7\64\1\0\1\64\6\0\6\64"+
    "\6\0\1\64\1\0\6\64\1\0\1\64\3\0\6\64"+
    "\1\267\4\64\2\0\1\64\4\0\7\64\1\0\1\64"+
    "\6\0\6\64\6\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\1\270\12\64\2\0\1\64\4\0\7\64\1\0"+
    "\1\64\6\0\6\64\6\0\1\64\1\0\6\64\1\0"+
    "\1\64\3\0\10\64\1\271\2\64\2\0\1\64\4\0"+
    "\7\64\1\0\1\64\6\0\6\64\6\0\1\64\1\0"+
    "\6\64\1\0\1\64\3\0\12\64\1\272\2\0\1\64"+
    "\4\0\7\64\1\0\1\64\6\0\6\64\6\0\1\64"+
    "\1\0\6\64\1\0\1\64\3\0\13\64\2\0\1\64"+
    "\4\0\1\64\1\273\5\64\1\0\1\64\6\0\6\64"+
    "\6\0\1\64\1\0\6\64\1\0\1\64\3\0\10\64"+
    "\1\274\2\64\2\0\1\64\4\0\7\64\1\0\1\64"+
    "\6\0\6\64\6\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\6\64\1\275\4\64\2\0\1\64\4\0\7\64"+
    "\1\0\1\64\6\0\6\64\22\0\1\276\71\0\1\245"+
    "\51\0\1\246\1\0\14\246\1\247\1\250\40\246\1\251"+
    "\12\246\1\0\14\246\1\247\1\277\40\246\1\251\12\246"+
    "\1\0\14\246\1\247\1\250\1\252\37\246\1\251\11\246"+
    "\1\251\1\0\14\251\1\300\1\301\53\251\1\0\14\251"+
    "\1\300\1\301\1\245\51\251\4\0\1\255\1\206\6\255"+
    "\1\0\1\255\3\0\13\255\2\0\1\255\4\0\7\255"+
    "\1\0\1\255\2\0\1\255\3\0\6\255\66\0\1\302"+
    "\52\0\1\303\55\0\1\304\72\0\1\261\60\0\1\304"+
    "\70\0\1\305\55\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\13\64\2\0\1\64\4\0\1\64\1\306\5\64"+
    "\1\0\1\64\6\0\6\64\6\0\1\64\1\0\6\64"+
    "\1\0\1\64\3\0\12\64\1\307\2\0\1\64\4\0"+
    "\7\64\1\0\1\64\6\0\6\64\6\0\1\64\1\0"+
    "\1\310\1\64\3\310\1\64\1\0\1\310\3\0\13\310"+
    "\2\0\1\310\4\0\7\310\1\0\1\310\6\0\6\310"+
    "\6\0\1\64\1\0\6\64\1\0\1\64\3\0\4\64"+
    "\1\311\6\64\2\0\1\64\4\0\7\64\1\0\1\64"+
    "\6\0\6\64\6\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\12\64\1\312\2\0\1\64\4\0\7\64\1\0"+
    "\1\64\6\0\6\64\6\0\1\64\1\0\6\64\1\0"+
    "\1\64\3\0\10\64\1\313\2\64\2\0\1\64\4\0"+
    "\7\64\1\0\1\64\6\0\6\64\2\0\1\251\1\0"+
    "\14\251\1\300\1\314\53\251\1\0\14\251\1\300\1\301"+
    "\1\0\51\251\31\0\1\315\72\0\1\316\43\0\1\64"+
    "\1\0\6\64\1\0\1\64\3\0\13\64\2\0\1\64"+
    "\4\0\6\64\1\317\1\0\1\64\6\0\6\64\6\0"+
    "\1\64\1\0\6\64\1\0\1\64\3\0\4\64\1\320"+
    "\6\64\2\0\1\64\4\0\7\64\1\0\1\64\6\0"+
    "\6\64\6\0\1\310\1\0\6\310\1\0\1\310\3\0"+
    "\13\310\2\0\1\310\4\0\7\310\1\0\1\310\6\0"+
    "\6\310\6\0\1\64\1\0\6\64\1\0\1\64\3\0"+
    "\13\64\2\0\1\64\4\0\1\321\6\64\1\0\1\64"+
    "\6\0\6\64\6\0\1\64\1\0\6\64\1\0\1\64"+
    "\3\0\5\64\1\322\5\64\2\0\1\64\4\0\7\64"+
    "\1\0\1\64\6\0\6\64\6\0\1\64\1\0\6\64"+
    "\1\0\1\64\3\0\13\64\2\0\1\64\4\0\6\64"+
    "\1\323\1\0\1\64\6\0\6\64\53\0\1\324\70\0"+
    "\1\325\25\0\1\64\1\0\6\64\1\0\1\64\3\0"+
    "\10\64\1\326\2\64\2\0\1\64\4\0\7\64\1\0"+
    "\1\64\6\0\6\64\6\0\1\64\1\0\6\64\1\0"+
    "\1\64\3\0\7\64\1\327\3\64\2\0\1\64\4\0"+
    "\7\64\1\0\1\64\6\0\6\64\6\0\1\64\1\0"+
    "\6\64\1\0\1\64\3\0\10\64\1\330\2\64\2\0"+
    "\1\64\4\0\7\64\1\0\1\64\6\0\6\64\6\0"+
    "\1\64\1\0\6\64\1\0\1\64\3\0\13\64\2\0"+
    "\1\64\4\0\2\64\1\331\4\64\1\0\1\64\6\0"+
    "\6\64\67\0\1\332\1\0\1\333\45\0\1\334\32\0"+
    "\1\64\1\0\6\64\1\0\1\64\3\0\13\64\2\0"+
    "\1\64\4\0\4\64\1\335\2\64\1\0\1\64\6\0"+
    "\6\64\70\0\1\336\50\0\1\337\51\0\1\340\132\0"+
    "\1\341\66\0\1\342\31\0\1\343\113\0\1\344\52\0"+
    "\1\345\75\0\1\346\107\0\1\347\64\0\1\350\53\0"+
    "\1\351\67\0\1\352\74\0\1\353\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\5\1\1\11\3\1\3\11\2\1\1\11\2\1"+
    "\1\11\15\1\3\11\20\1\1\0\16\1\1\11\4\1"+
    "\1\11\1\1\1\11\3\1\3\0\1\11\1\1\1\11"+
    "\2\0\1\1\2\0\3\1\1\0\1\11\1\0\1\1"+
    "\1\11\11\1\4\0\2\1\2\0\1\11\1\1\1\11"+
    "\3\0\1\1\1\0\1\1\11\0\6\1\1\11\1\0"+
    "\10\1\2\0\1\11\3\1\1\0\4\1\1\0\1\11"+
    "\5\0\1\1\1\11\7\1\1\11\1\1\4\0\2\11"+
    "\7\1\2\0\5\1\2\0\4\1\3\0\1\1\3\0"+
    "\1\11\3\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _SilverstripeLexer() {
        this((java.io.Reader)null);
    }

    private void resetAll() {
    }
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopstate() {
        yybegin(stack.pop());
    }

    public void yycleanstates() {
        while(!stack.isEmpty()) {
            yybegin(stack.pop());
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SilverstripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 57: break;
          case 2: 
            { // Backtrack over the {$ characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("$")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")
    )) {
        yypushback(1);
    }

    yypushstate(SS_INJECTION);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 58: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 4: 
            { yypushback(yylength()); yycleanstates(); return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 60: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 6: 
            { return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 62: break;
          case 7: 
            { return SilverstripeTokenTypes.SS_LEFT_BRACE;
            } 
            // fall through
          case 63: break;
          case 8: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_RIGHT_BRACE;
            } 
            // fall through
          case 64: break;
          case 9: 
            { yypushback(yylength()); yypopstate();
            } 
            // fall through
          case 65: break;
          case 10: 
            { yypushstate(SS_LOOKUP_STEP); return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 66: break;
          case 11: 
            { yypushstate(SS_LOOKUP_ARGUMENTS); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 67: break;
          case 12: 
            { yypopstate(); return SilverstripeTokenTypes.SS_IDENTIFIER;
            } 
            // fall through
          case 68: break;
          case 13: 
            { return SilverstripeTokenTypes.SS_NUMBER;
            } 
            // fall through
          case 69: break;
          case 14: 
            { return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 70: break;
          case 15: 
            { yypushstate(SS_LOOKUP); return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 71: break;
          case 16: 
            { yypopstate(); return SilverstripeTokenTypes.SS_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 72: break;
          case 17: 
            { return SilverstripeTokenTypes.SS_COMMA;
            } 
            // fall through
          case 73: break;
          case 18: 
            { yypushback(yylength()); yypushstate(SS_BAD_BLOCK_STATEMENT);
            } 
            // fall through
          case 74: break;
          case 19: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_BLOCK_NAME;
            } 
            // fall through
          case 75: break;
          case 20: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 76: break;
          case 21: 
            { return SilverstripeTokenTypes.SS_COMPARISON_OPERATOR;
            } 
            // fall through
          case 77: break;
          case 22: 
            { yypushstate(SS_INCLUDE_VARS); return SilverstripeTokenTypes.SS_INCLUDE_FILE;
            } 
            // fall through
          case 78: break;
          case 23: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 24: 
            { yypushstate(SS_REQUIRE_CONTENT); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 80: break;
          case 25: 
            { return SilverstripeTokenTypes.SS_STRING;
            } 
            // fall through
          case 81: break;
          case 26: 
            { return SilverstripeTokenTypes.SS_EQUALS;
            } 
            // fall through
          case 82: break;
          case 27: 
            { return SilverstripeTokenTypes.SS_COMMENT;
            } 
            // fall through
          case 83: break;
          case 28: 
            { // Backtrack over the <% characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
    )) {
        yypushback(1);
    }

    yypushstate(SS_BLOCK_START);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 84: break;
          case 29: 
            { return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 85: break;
          case 30: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 86: break;
          case 31: 
            { return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 87: break;
          case 32: 
            { yypopstate(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 88: break;
          case 33: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_IF_KEYWORD;
            } 
            // fall through
          case 89: break;
          case 34: 
            { // Backtrack until we've passed back over the <% characters of the new block
        while (yylength() > 0 && (
            yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
            || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
        )) {
            yypushback(1);
        }

        yycleanstates(); // Reset state to resume lexing
        return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 90: break;
          case 35: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BAD_BLOCK_STATEMENT;
            } 
            // fall through
          case 91: break;
          case 36: 
            { return SilverstripeTokenTypes.SS_AND_OR_OPERATOR;
            } 
            // fall through
          case 92: break;
          case 37: 
            { yypushback(1); yypushstate(SS_NAMED_VAR); return SilverstripeTokenTypes.SS_NAMED_ARGUMENT_NAME;
            } 
            // fall through
          case 93: break;
          case 38: 
            { return SilverstripeTokenTypes.SS_IS_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 39: 
            { yypushstate(SS_TRANSLATION_STATEMENT); yypushback(1); return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 95: break;
          case 40: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_IDENTIFIER;
            } 
            // fall through
          case 96: break;
          case 41: 
            { return SilverstripeTokenTypes.SS_REQUIRE_CSS;
            } 
            // fall through
          case 97: break;
          case 42: 
            { return SilverstripeTokenTypes.SS_PRIMITIVE;
            } 
            // fall through
          case 98: break;
          case 43: 
            { yypushstate(SS_COMMENT); return SilverstripeTokenTypes.SS_COMMENT_START;
            } 
            // fall through
          case 99: break;
          case 44: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_START_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 45: 
            { return SilverstripeTokenTypes.SS_ELSE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 46: 
            { yypopstate(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 102: break;
          case 47: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 103: break;
          case 48: 
            { return SilverstripeTokenTypes.SS_END_KEYWORD;
            } 
            // fall through
          case 104: break;
          case 49: 
            { yypushstate(SS_CACHED_STATEMENT); return SilverstripeTokenTypes.SS_CACHED_KEYWORD;
            } 
            // fall through
          case 105: break;
          case 50: 
            { yypushstate(SS_INCLUDE_STATEMENT); return SilverstripeTokenTypes.SS_INCLUDE_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 51: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_ELSE_IF_KEYWORD;
            } 
            // fall through
          case 107: break;
          case 52: 
            { yypushstate(SS_REQUIRE_STATEMENT); return SilverstripeTokenTypes.SS_REQUIRE_KEYWORD;
            } 
            // fall through
          case 108: break;
          case 53: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_SIMPLE_KEYWORD;
            } 
            // fall through
          case 109: break;
          case 54: 
            { return SilverstripeTokenTypes.SS_REQUIRE_THEMED_CSS;
            } 
            // fall through
          case 110: break;
          case 55: 
            { return SilverstripeTokenTypes.SS_REQUIRE_JS;
            } 
            // fall through
          case 111: break;
          case 56: 
            { return SilverstripeTokenTypes.SS_REQUIRE_THEMED_JS;
            } 
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
