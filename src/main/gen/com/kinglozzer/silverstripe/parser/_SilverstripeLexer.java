/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.kinglozzer.silverstripe.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Silverstripe.flex</tt>
 */
final class _SilverstripeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SS_INJECTION = 2;
  public static final int SS_LOOKUP = 4;
  public static final int SS_LOOKUP_STEP = 6;
  public static final int SS_LOOKUP_ARGUMENTS = 8;
  public static final int SS_BLOCK_START = 10;
  public static final int SS_BLOCK_STATEMENT = 12;
  public static final int SS_BAD_BLOCK_STATEMENT = 14;
  public static final int SS_IF_STATEMENT = 16;
  public static final int SS_INCLUDE_STATEMENT = 18;
  public static final int SS_TRANSLATION_STATEMENT = 20;
  public static final int SS_CACHED_STATEMENT = 22;
  public static final int SS_REQUIRE_STATEMENT = 24;
  public static final int SS_INCLUDE_VARS = 26;
  public static final int SS_NAMED_VAR = 28;
  public static final int SS_COMMENT = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10,  6,  6, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\60\1\1\22\0\1\2\1\35\1\41\1\0\1\14\1\17\1\37\1\42\1\63\1\55"+
    "\1\0\1\3\1\61\1\54\1\5\1\52\1\7\1\13\10\4\2\0\1\16\1\34\1\20\2\0\1\11\1\12"+
    "\2\11\1\6\1\11\21\15\1\10\2\15\1\0\1\56\2\0\1\33\1\0\1\45\1\46\1\50\1\51\1"+
    "\31\1\30\1\47\1\27\1\25\2\15\1\21\1\15\1\36\1\22\1\23\1\53\1\43\1\32\1\26"+
    "\1\44\1\15\1\24\1\10\2\15\1\57\1\40\1\62\7\0\1\60\242\0\2\60\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\3\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\3\11\1\12\2\11\1\13\1\14\1\5"+
    "\1\11\1\15\1\16\1\17\1\15\1\11\3\17\2\11"+
    "\1\20\1\21\2\22\1\23\2\22\7\23\1\22\1\24"+
    "\1\5\2\24\1\0\1\11\1\25\1\11\1\17\2\11"+
    "\1\26\2\11\1\27\4\11\1\30\1\11\4\31\3\0"+
    "\1\32\1\33\1\34\2\0\1\15\2\0\3\17\1\0"+
    "\1\35\1\0\1\36\1\37\2\23\1\40\6\23\4\0"+
    "\1\41\1\42\2\0\1\25\1\17\1\43\3\0\1\44"+
    "\1\0\1\45\6\0\3\15\3\17\1\46\1\0\10\23"+
    "\2\0\1\42\3\24\1\0\1\24\1\41\1\25\1\47"+
    "\4\0\1\50\1\51\1\52\1\23\1\53\4\23\1\54"+
    "\1\41\2\0\1\50\1\55\2\23\1\56\3\23\1\41"+
    "\4\23\1\57\1\60\1\61\1\62\1\23\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u0410\0\u0410\0\u0410\0\u04e0\0\u0478\0\u0410\0\u0514\0\u0548"+
    "\0\u0410\0\u057c\0\u0478\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u04ac\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u0410\0\u0410"+
    "\0\u0410\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0618\0\u0b2c\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c30\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0410\0\u0d68\0\u0410\0\u0444\0\u0478\0\u0d9c\0\u0374\0\u03a8"+
    "\0\u03dc\0\u0410\0\u0dd0\0\u0410\0\u0618\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0750\0\u0410\0\u0784\0\u0f70"+
    "\0\u0410\0\u0fa4\0\u0fd8\0\u07ec\0\u100c\0\u1040\0\u1074\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u0410\0\u12e4\0\u0410\0\u1318\0\u0c30\0\u134c"+
    "\0\u1380\0\u0c98\0\u0c30\0\u0ccc\0\u13b4\0\u13e8\0\u141c\0\u1450"+
    "\0\u1484\0\u1484\0\u0e6c\0\u0ea0\0\u14b8\0\u14ec\0\u1520\0\u0410"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u175c\0\u0410\0\u1790\0\u17c4\0\u17f8\0\u182c"+
    "\0\u1248\0\u1860\0\u064c\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964"+
    "\0\u064c\0\u0410\0\u07ec\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u0410\0\u17f8\0\u1ad0\0\u1b04\0\u0410\0\u0410\0\u1b38"+
    "\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1b04\0\u1c70\0\u1ca4"+
    "\0\u1cd8\0\u1d0c\0\u07ec\0\u07ec\0\u07ec\0\u07ec\0\u1d40\0\u07ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\20\1\21\1\20\1\22\37\20\1\23\1\24\4\20"+
    "\1\25\1\26\1\27\11\25\1\30\42\25\1\31\1\0"+
    "\1\25\1\32\1\25\1\33\1\34\1\35\2\33\1\36"+
    "\6\33\1\37\2\33\1\40\40\33\1\0\2\33\1\41"+
    "\1\33\1\26\1\35\3\33\1\42\1\33\3\42\2\33"+
    "\1\42\3\33\13\42\2\33\1\42\4\33\7\42\1\33"+
    "\1\42\4\33\1\0\4\33\1\34\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\3\47\1\45\1\51\1\47\3\33"+
    "\5\47\1\52\1\47\1\53\3\47\2\33\1\54\2\33"+
    "\1\55\1\56\7\47\1\33\1\47\1\44\1\57\2\33"+
    "\1\0\1\60\2\33\1\61\1\62\1\43\3\61\1\63"+
    "\1\61\3\63\2\61\1\63\1\64\1\65\1\61\1\66"+
    "\2\63\1\67\1\70\3\63\1\71\2\63\2\61\1\63"+
    "\4\61\1\72\2\63\1\73\1\63\1\74\1\63\1\61"+
    "\1\63\1\75\3\61\1\0\3\61\1\33\1\34\1\43"+
    "\3\33\1\47\1\33\3\47\1\33\1\51\1\47\1\33"+
    "\1\40\1\33\13\47\2\33\1\47\2\33\1\55\1\56"+
    "\7\47\1\33\1\47\4\33\1\0\1\60\2\33\1\76"+
    "\1\77\14\76\1\100\1\101\40\76\1\102\3\76\1\33"+
    "\1\34\1\43\1\44\1\45\1\103\1\47\1\50\3\47"+
    "\1\45\1\51\1\47\1\104\1\40\1\104\13\47\1\104"+
    "\1\105\1\106\1\107\1\110\1\55\1\56\7\47\1\33"+
    "\1\47\1\44\3\33\1\0\4\33\1\34\1\43\3\33"+
    "\1\111\1\33\3\111\2\33\1\111\1\33\1\40\1\33"+
    "\13\111\2\33\1\111\4\33\11\111\2\33\1\111\1\33"+
    "\1\0\4\33\1\34\1\43\3\33\1\112\1\33\3\112"+
    "\2\33\1\112\1\33\1\40\1\33\4\112\1\113\1\114"+
    "\5\112\2\33\1\112\2\33\1\55\1\56\7\112\1\33"+
    "\1\112\2\33\1\115\1\33\1\0\4\33\1\34\1\43"+
    "\3\33\1\47\1\33\3\47\2\33\1\47\3\33\13\47"+
    "\2\33\1\47\4\33\7\47\1\33\1\47\4\33\1\0"+
    "\4\33\1\34\1\43\3\33\1\116\1\33\3\116\2\33"+
    "\1\116\3\33\13\116\2\33\1\116\4\33\7\116\1\33"+
    "\1\116\4\33\1\0\1\60\3\33\1\34\1\35\1\44"+
    "\1\45\1\103\1\33\1\50\3\33\1\45\1\51\11\33"+
    "\1\117\1\33\1\120\3\33\1\121\1\33\1\122\2\33"+
    "\1\55\1\56\11\33\1\44\3\33\1\0\3\33\1\123"+
    "\1\124\1\125\51\123\1\126\7\123\14\20\1\21\1\20"+
    "\1\127\37\20\1\130\1\131\12\20\1\0\1\20\3\0"+
    "\2\20\1\0\3\20\13\0\2\20\1\0\4\20\7\0"+
    "\1\20\1\0\27\20\1\132\45\20\1\0\56\20\1\0"+
    "\17\20\1\21\47\20\65\0\1\26\64\0\1\43\67\0"+
    "\1\47\1\0\3\47\2\0\1\47\3\0\13\47\2\0"+
    "\1\47\4\0\7\47\1\0\1\47\11\0\1\34\70\0"+
    "\1\133\1\0\3\133\2\0\1\133\3\0\13\133\2\0"+
    "\1\133\4\0\7\133\1\0\1\133\30\0\1\134\47\0"+
    "\1\42\1\0\6\42\1\0\1\42\3\0\13\42\2\0"+
    "\1\42\4\0\7\42\1\0\1\42\14\0\1\45\1\135"+
    "\1\0\1\50\3\0\1\45\54\0\1\45\1\135\1\136"+
    "\1\45\3\0\1\45\15\0\1\136\36\0\1\137\2\0"+
    "\1\137\3\0\1\137\54\0\1\47\1\0\6\47\1\0"+
    "\1\47\3\0\13\47\2\0\1\47\4\0\7\47\1\0"+
    "\1\47\14\0\1\45\1\135\1\136\1\45\1\140\1\0"+
    "\1\141\1\45\15\0\1\136\14\0\1\141\21\0\1\47"+
    "\1\0\6\47\1\0\1\47\3\0\13\47\2\0\1\47"+
    "\4\0\1\142\6\47\1\0\1\47\14\0\1\47\1\0"+
    "\6\47\1\0\1\47\3\0\13\47\2\0\1\47\4\0"+
    "\2\47\1\143\4\47\1\0\1\47\14\0\1\47\1\0"+
    "\6\47\1\0\1\47\3\0\13\47\2\0\1\47\4\0"+
    "\1\47\1\144\5\47\1\0\1\47\10\0\41\145\1\146"+
    "\22\145\42\147\1\146\21\147\1\0\1\62\66\0\1\63"+
    "\1\0\6\63\1\0\1\63\3\0\13\63\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\27\0\1\150\64\0\1\151"+
    "\47\0\1\63\1\0\6\63\1\0\1\63\3\0\1\63"+
    "\1\152\11\63\2\0\1\63\4\0\7\63\1\0\1\63"+
    "\14\0\1\63\1\0\6\63\1\0\1\63\3\0\4\63"+
    "\1\153\6\63\2\0\1\63\4\0\7\63\1\0\1\63"+
    "\14\0\1\63\1\0\6\63\1\0\1\63\3\0\7\63"+
    "\1\154\3\63\2\0\1\155\4\0\7\63\1\0\1\63"+
    "\14\0\1\63\1\0\6\63\1\0\1\63\3\0\1\156"+
    "\12\63\2\0\1\157\4\0\7\63\1\0\1\63\14\0"+
    "\1\63\1\0\6\63\1\0\1\63\3\0\10\63\1\160"+
    "\2\63\2\0\1\63\4\0\7\63\1\0\1\63\14\0"+
    "\1\63\1\0\6\63\1\0\1\63\3\0\13\63\2\0"+
    "\1\63\4\0\2\63\1\161\4\63\1\0\1\63\14\0"+
    "\1\63\1\0\6\63\1\0\1\63\3\0\13\63\2\0"+
    "\1\63\4\0\2\63\1\162\4\63\1\0\1\63\64\0"+
    "\1\163\7\0\1\76\1\164\14\76\1\100\1\101\40\76"+
    "\1\102\3\76\1\164\1\77\14\164\1\165\1\166\44\164"+
    "\1\76\1\164\14\76\1\100\1\167\40\76\1\102\4\76"+
    "\1\164\14\76\1\100\1\101\1\170\37\76\1\102\3\76"+
    "\1\102\1\164\14\102\1\171\1\172\44\102\34\0\1\173"+
    "\33\0\1\47\1\0\6\47\1\0\1\47\3\0\1\47"+
    "\1\174\11\47\2\0\1\47\4\0\7\47\1\0\1\47"+
    "\47\0\1\175\64\0\1\175\27\0\1\111\1\0\6\111"+
    "\1\0\1\111\3\0\13\111\2\0\1\111\4\0\11\111"+
    "\2\0\1\111\7\0\1\176\1\0\1\177\1\200\6\177"+
    "\1\0\1\177\3\0\13\177\1\201\1\0\1\177\4\0"+
    "\7\177\1\0\1\177\2\0\1\202\7\0\1\176\1\0"+
    "\1\177\1\200\6\177\1\0\1\177\3\0\11\177\1\203"+
    "\1\177\1\201\1\0\1\177\4\0\7\177\1\0\1\177"+
    "\2\0\1\202\11\0\1\202\1\200\6\202\1\0\1\202"+
    "\3\0\13\202\2\0\1\202\4\0\7\202\1\0\1\202"+
    "\2\0\1\202\7\0\1\176\1\0\1\204\1\0\6\204"+
    "\1\0\1\204\3\0\13\204\1\201\1\0\1\204\4\0"+
    "\7\204\1\0\1\204\53\0\1\205\65\0\1\206\62\0"+
    "\1\207\73\0\1\210\13\0\1\133\1\0\6\133\1\0"+
    "\1\133\3\0\13\133\2\0\1\133\4\0\7\133\1\0"+
    "\1\133\13\0\1\211\1\212\2\0\1\212\3\0\1\212"+
    "\40\0\1\211\13\0\1\137\1\0\1\136\1\137\3\0"+
    "\1\137\15\0\1\136\36\0\1\213\1\0\2\213\1\0"+
    "\3\213\14\0\2\213\13\0\2\213\1\0\2\213\21\0"+
    "\1\214\3\0\1\214\54\0\1\47\1\0\6\47\1\0"+
    "\1\47\3\0\13\47\2\0\1\47\4\0\1\47\1\215"+
    "\5\47\1\0\1\47\14\0\1\47\1\0\6\47\1\0"+
    "\1\47\3\0\1\216\12\47\2\0\1\47\4\0\7\47"+
    "\1\0\1\47\14\0\1\47\1\0\6\47\1\0\1\47"+
    "\3\0\1\217\12\47\2\0\1\47\4\0\7\47\1\0"+
    "\1\47\36\0\1\220\25\0\1\221\13\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\1\63\1\222\11\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\5\63\1\223\5\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\13\63\2\0\1\63\4\0"+
    "\5\63\1\224\1\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\11\63\1\225\1\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\13\63\2\0\1\63\4\0"+
    "\6\63\1\226\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\13\63\2\0\1\63\4\0\7\63"+
    "\1\0\1\227\14\0\1\63\1\0\6\63\1\0\1\63"+
    "\3\0\11\63\1\230\1\63\2\0\1\63\4\0\7\63"+
    "\1\0\1\63\14\0\1\63\1\0\6\63\1\0\1\63"+
    "\3\0\13\63\2\0\1\63\4\0\5\63\1\231\1\63"+
    "\1\0\1\63\27\0\1\232\44\0\16\164\1\165\1\166"+
    "\62\164\1\165\1\233\62\164\1\165\1\166\1\234\43\164"+
    "\1\235\1\0\14\235\1\236\1\237\1\170\37\235\1\240"+
    "\3\235\1\241\1\0\56\241\1\0\3\241\1\102\1\164"+
    "\14\102\1\171\1\242\45\102\1\164\14\102\1\171\1\172"+
    "\1\234\43\102\4\0\1\47\1\0\6\47\1\0\1\47"+
    "\3\0\5\47\1\243\5\47\2\0\1\47\4\0\7\47"+
    "\1\0\1\47\12\0\1\176\31\0\1\201\33\0\1\244"+
    "\1\0\6\244\1\0\1\244\3\0\13\244\2\0\1\244"+
    "\4\0\7\244\1\0\1\244\2\0\1\244\7\0\1\201"+
    "\125\0\1\245\40\0\1\246\63\0\1\247\61\0\1\250"+
    "\50\0\1\212\2\0\1\212\3\0\1\212\54\0\1\47"+
    "\1\0\6\47\1\0\1\47\3\0\10\47\1\251\2\47"+
    "\2\0\1\47\4\0\7\47\1\0\1\47\14\0\1\47"+
    "\1\0\6\47\1\0\1\47\3\0\11\47\1\215\1\47"+
    "\2\0\1\47\4\0\7\47\1\0\1\47\14\0\1\47"+
    "\1\0\6\47\1\0\1\47\3\0\1\251\12\47\2\0"+
    "\1\47\4\0\7\47\1\0\1\47\64\0\1\252\13\0"+
    "\1\63\1\0\6\63\1\0\1\63\3\0\2\63\1\253"+
    "\10\63\2\0\1\63\4\0\7\63\1\0\1\63\14\0"+
    "\1\63\1\0\6\63\1\0\1\63\3\0\6\63\1\253"+
    "\4\63\2\0\1\63\4\0\7\63\1\0\1\63\14\0"+
    "\1\63\1\0\6\63\1\0\1\63\3\0\1\254\12\63"+
    "\2\0\1\63\4\0\7\63\1\0\1\63\14\0\1\63"+
    "\1\0\6\63\1\0\1\63\3\0\10\63\1\255\2\63"+
    "\2\0\1\63\4\0\7\63\1\0\1\63\14\0\1\63"+
    "\1\0\6\63\1\0\1\63\3\0\12\63\1\256\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\13\63\2\0\1\63\4\0"+
    "\1\63\1\257\5\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\10\63\1\260\2\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\6\63\1\261\4\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\30\0\1\262\63\0"+
    "\1\234\43\0\1\235\1\0\14\235\1\236\1\237\40\235"+
    "\1\240\4\235\1\0\14\235\1\236\1\263\40\235\1\240"+
    "\4\235\1\0\14\235\1\236\1\237\1\241\37\235\1\240"+
    "\3\235\1\240\1\0\14\240\1\264\1\265\45\240\1\0"+
    "\14\240\1\264\1\265\1\234\43\240\4\0\1\244\1\200"+
    "\6\244\1\0\1\244\3\0\13\244\2\0\1\244\4\0"+
    "\7\244\1\0\1\244\2\0\1\244\36\0\1\266\64\0"+
    "\1\245\52\0\1\266\62\0\1\267\47\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\13\63\2\0\1\63\4\0"+
    "\1\63\1\270\5\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\12\63\1\271\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\14\0\1\63\1\0\1\272"+
    "\1\63\3\272\1\63\1\0\1\272\3\0\13\272\2\0"+
    "\1\272\4\0\7\272\1\0\1\272\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\4\63\1\273\6\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\12\63\1\274\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\10\63\1\275\2\63\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\10\0\1\240\1\0\14\240"+
    "\1\264\1\276\45\240\1\0\14\240\1\264\1\265\1\0"+
    "\43\240\4\0\1\63\1\0\6\63\1\0\1\63\3\0"+
    "\13\63\2\0\1\63\4\0\6\63\1\277\1\0\1\63"+
    "\14\0\1\63\1\0\6\63\1\0\1\63\3\0\4\63"+
    "\1\300\6\63\2\0\1\63\4\0\7\63\1\0\1\63"+
    "\14\0\1\272\1\0\6\272\1\0\1\272\3\0\13\272"+
    "\2\0\1\272\4\0\7\272\1\0\1\272\14\0\1\63"+
    "\1\0\6\63\1\0\1\63\3\0\13\63\2\0\1\63"+
    "\4\0\1\301\6\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\5\63\1\302\5\63\2\0"+
    "\1\63\4\0\7\63\1\0\1\63\14\0\1\63\1\0"+
    "\6\63\1\0\1\63\3\0\13\63\2\0\1\63\4\0"+
    "\6\63\1\303\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\10\63\1\304\2\63\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\7\63\1\305\3\63\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\10\63\1\306\2\63\2\0\1\63"+
    "\4\0\7\63\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\13\63\2\0\1\63\4\0\2\63"+
    "\1\307\4\63\1\0\1\63\14\0\1\63\1\0\6\63"+
    "\1\0\1\63\3\0\13\63\2\0\1\63\4\0\4\63"+
    "\1\310\2\63\1\0\1\63\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\5\1\1\11\3\1\3\11\2\1\1\11\2\1"+
    "\1\11\15\1\3\11\20\1\1\0\16\1\1\11\1\1"+
    "\1\11\3\1\3\0\1\11\1\1\1\11\2\0\1\1"+
    "\2\0\3\1\1\0\1\11\1\0\1\1\1\11\11\1"+
    "\4\0\2\1\2\0\1\11\1\1\1\11\3\0\1\1"+
    "\1\0\1\1\6\0\6\1\1\11\1\0\10\1\2\0"+
    "\1\11\3\1\1\0\4\1\4\0\1\1\1\11\7\1"+
    "\1\11\1\1\2\0\2\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public _SilverstripeLexer() {
        this((java.io.Reader)null);
    }

    private void resetAll() {
    }
    private Stack<Integer> stack = new Stack<Integer>();

    public void yypushstate(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopstate() {
        yybegin(stack.pop());
    }

    public void yycleanstates() {
        while(!stack.isEmpty()) {
            yybegin(stack.pop());
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SilverstripeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 52: break;
          case 2: 
            { // Backtrack over the {$ characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("$")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("{")
    )) {
        yypushback(1);
    }

    yypushstate(SS_INJECTION);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 53: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 4: 
            { yypushback(yylength()); yycleanstates(); return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 55: break;
          case 5: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 6: 
            { return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 57: break;
          case 7: 
            { return SilverstripeTokenTypes.SS_LEFT_BRACE;
            } 
            // fall through
          case 58: break;
          case 8: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_RIGHT_BRACE;
            } 
            // fall through
          case 59: break;
          case 9: 
            { yypushback(yylength()); yypopstate();
            } 
            // fall through
          case 60: break;
          case 10: 
            { yypushstate(SS_LOOKUP_STEP); return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 61: break;
          case 11: 
            { yypushstate(SS_LOOKUP_ARGUMENTS); return SilverstripeTokenTypes.SS_LEFT_PARENTHESIS;
            } 
            // fall through
          case 62: break;
          case 12: 
            { yypopstate(); return SilverstripeTokenTypes.SS_IDENTIFIER;
            } 
            // fall through
          case 63: break;
          case 13: 
            { return SilverstripeTokenTypes.SS_NUMBER;
            } 
            // fall through
          case 64: break;
          case 14: 
            { return SilverstripeTokenTypes.SS_DOT;
            } 
            // fall through
          case 65: break;
          case 15: 
            { yypushstate(SS_LOOKUP); return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 66: break;
          case 16: 
            { yypopstate(); return SilverstripeTokenTypes.SS_RIGHT_PARENTHESIS;
            } 
            // fall through
          case 67: break;
          case 17: 
            { return SilverstripeTokenTypes.SS_COMMA;
            } 
            // fall through
          case 68: break;
          case 18: 
            { yypushback(yylength()); yypushstate(SS_BAD_BLOCK_STATEMENT);
            } 
            // fall through
          case 69: break;
          case 19: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_BLOCK_NAME;
            } 
            // fall through
          case 70: break;
          case 20: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 71: break;
          case 21: 
            { return SilverstripeTokenTypes.SS_COMPARISON_OPERATOR;
            } 
            // fall through
          case 72: break;
          case 22: 
            { yypushstate(SS_INCLUDE_VARS); return SilverstripeTokenTypes.SS_INCLUDE_FILE;
            } 
            // fall through
          case 73: break;
          case 23: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_KEYWORD;
            } 
            // fall through
          case 74: break;
          case 24: 
            { return SilverstripeTokenTypes.SS_EQUALS;
            } 
            // fall through
          case 75: break;
          case 25: 
            { return SilverstripeTokenTypes.SS_COMMENT;
            } 
            // fall through
          case 76: break;
          case 26: 
            { // Backtrack over the <% characters
    while (yylength() > 0 && (
        yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
        || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
    )) {
        yypushback(1);
    }

    yypushstate(SS_BLOCK_START);
    // Lex whitespace separately - the formatter needs this... no idea why
    if (yytext().toString().trim().length() == 0) {
        return TokenType.WHITE_SPACE;
    }
    return SilverstripeTokenTypes.SS_TEXT;
            } 
            // fall through
          case 77: break;
          case 27: 
            { return SilverstripeTokenTypes.SS_LOOKUP;
            } 
            // fall through
          case 78: break;
          case 28: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 79: break;
          case 29: 
            { return SilverstripeTokenTypes.SS_STRING;
            } 
            // fall through
          case 80: break;
          case 30: 
            { return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 81: break;
          case 31: 
            { yypopstate(); return SilverstripeTokenTypes.SS_BLOCK_END;
            } 
            // fall through
          case 82: break;
          case 32: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_IF_KEYWORD;
            } 
            // fall through
          case 83: break;
          case 33: 
            { // Backtrack until we've passed back over the <% characters of the new block
        while (yylength() > 0 && (
            yytext().subSequence(yylength() - 1, yylength()).toString().equals("%")
            || yytext().subSequence(yylength() - 1, yylength()).toString().equals("<")
        )) {
            yypushback(1);
        }

        yycleanstates(); // Reset state to resume lexing
        return SilverstripeTokenTypes.SS_UNFINISHED_BLOCK_STATEMENT;
            } 
            // fall through
          case 84: break;
          case 34: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_BAD_BLOCK_STATEMENT;
            } 
            // fall through
          case 85: break;
          case 35: 
            { return SilverstripeTokenTypes.SS_AND_OR_OPERATOR;
            } 
            // fall through
          case 86: break;
          case 36: 
            { yypushback(1); yypushstate(SS_NAMED_VAR); return SilverstripeTokenTypes.SS_NAMED_ARGUMENT_NAME;
            } 
            // fall through
          case 87: break;
          case 37: 
            { return SilverstripeTokenTypes.SS_IS_KEYWORD;
            } 
            // fall through
          case 88: break;
          case 38: 
            { yypushstate(SS_TRANSLATION_STATEMENT); yypushback(1); return SilverstripeTokenTypes.SS_BLOCK_START;
            } 
            // fall through
          case 89: break;
          case 39: 
            { return SilverstripeTokenTypes.SS_TRANSLATION_IDENTIFIER;
            } 
            // fall through
          case 90: break;
          case 40: 
            { return SilverstripeTokenTypes.SS_PRIMITIVE;
            } 
            // fall through
          case 91: break;
          case 41: 
            { yypushstate(SS_COMMENT); return SilverstripeTokenTypes.SS_COMMENT_START;
            } 
            // fall through
          case 92: break;
          case 42: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_START_KEYWORD;
            } 
            // fall through
          case 93: break;
          case 43: 
            { return SilverstripeTokenTypes.SS_ELSE_KEYWORD;
            } 
            // fall through
          case 94: break;
          case 44: 
            { yypopstate(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 95: break;
          case 45: 
            { yycleanstates(); return SilverstripeTokenTypes.SS_COMMENT_END;
            } 
            // fall through
          case 96: break;
          case 46: 
            { return SilverstripeTokenTypes.SS_END_KEYWORD;
            } 
            // fall through
          case 97: break;
          case 47: 
            { yypushstate(SS_CACHED_STATEMENT); return SilverstripeTokenTypes.SS_CACHED_KEYWORD;
            } 
            // fall through
          case 98: break;
          case 48: 
            { yypushstate(SS_INCLUDE_STATEMENT); return SilverstripeTokenTypes.SS_INCLUDE_KEYWORD;
            } 
            // fall through
          case 99: break;
          case 49: 
            { yypushstate(SS_IF_STATEMENT); return SilverstripeTokenTypes.SS_ELSE_IF_KEYWORD;
            } 
            // fall through
          case 100: break;
          case 50: 
            { yypushstate(SS_REQUIRE_STATEMENT); return SilverstripeTokenTypes.SS_REQUIRE_KEYWORD;
            } 
            // fall through
          case 101: break;
          case 51: 
            { yypushstate(SS_BLOCK_STATEMENT); return SilverstripeTokenTypes.SS_SIMPLE_KEYWORD;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
